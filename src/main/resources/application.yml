spring:
  application:
    name: order-api
  datasource:
    url: 'jdbc:postgresql://localhost:5432/orders'
    username: admin
    password: admin
    jpa:
      database-platform: org.hibernate.dialect.PostgreSQLDialect
      driver-class-name: org.postgresql.Driver
      hibernate:
        ddl-auto: update
      properties:
        hibernate.default_schema: order
  flyway:
    enabled: true
    baselineOnMigrate: true
    locations: 'classpath:/db/migration'
    check-location: false
  management:
    endpoints:
      web:
        base-path: /actuator
        exposure:
          include: health, metrics
    endpoint:
      prometheus:
        enabled: true
      metrics:
        enabled: true
  kafka:
    bootstrap-servers: "localhost:9092"  # Replace with your Kafka brokers
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 1
      buffer-memory: 33554432
    consumer:
      group-id: order
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: '*'
topic:
  order:
    consumer: order
    producer: order
    groupId: group_id
  orders-calculated: orders-calculated
  product-external-b:
    consumer: orders-calculated  # Produto Externo B consumindo os pedidos processados
    groupId: product-external-b-group_id
hash:
  key:
    book: oder
    customer: customer